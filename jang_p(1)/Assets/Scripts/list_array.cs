using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public class list_array : MonoBehaviour
{
    //List 선언
    //List<데이터 타입> 리스트이름 = new List<데이터 타입>():
    //크기를 지정하고 만들고 싶을 때는
    //List<DataType> name = new List<DataType>(new DataType[size])
    // ㄴ 빈거 size짜리 리스트를 만듬.
    //Lsit도 생성과 동시에 초기화 해서 대입 가능
    //List<string> jjm = new List<string>() {"장정미", "메롱"};
    // ㄴ 이러면 jjm 리스트 안에 0번쨰는 "장정미" 1번째는 "메롱"
    //jjm[01] = "장정미", jjm[1] = "메롱"
    //리스트는 다른 리스트를 받아서 대입 할 수 있음
    //List<string>  yyw = new List<string>(jjm);
    // ㄴ yyw = jjm
    // 리스트에 데이터 추가 하는 방법
    // Add 함수 이용
    // 얘는 리스트의 맨 뒤에 추가하는 방법임
    List<string> jjm = new List<string>();
    // jjm 라는 문자형 리스트 초기화
    void Start()
    {
        jjm.Add("장정미미");
        //여기서는 jjm 초기화 후 별도로 값을 안 넣어놨어서
        //size가 0임 (아무것도 없음)
        // 그래서 "장정미미"가 jjm[0]에 들어감
        jjm.Add("장정미미");
        //추가한 "장정미미"는 JJM[1]에 위치

        //insert 함수 이용 방법
        // 말 그대로 끼워 넣는 방식임
        // 끼워 넣으니까 기존에 있던 애들은 뒤로 밀림

        jjm.Insert(0, "유용원원");
        //이러면 ssh는?
        // [유용원원, 장정미미, 장정미미]

        //배열, 리스트의 크기를 구하는 방법
        // 배열일 경우
        // 배열 이름.Length;
        // 리스트일 경우
        // 리스트이름.Count;
        // 배열과 리스트의 크기를 구하는 방법이 다름
        // 방법이 다른데 리스트와 배열의 이름을 비슷하게 지으면?
        // 배열이름.Count; 이렇게 하려고 해서 에러가 나올 것임

        // 리스트에서 데이터 삭제하는 방법
        // -Remove 함수
        // 원하는 "값"을 찾아서 지움
        // 같은 값이 여러개면 맨 처음 값을 지우는데 ...
        // 같은 id를 가지는 3마리 중 2번째를 지워야하는 상황에서는?

        // -RemoveAt 함수 사용
        // 얘는 인덱스 정보로 지움.
        // 배열과 동일하게 0부터 시작

        // 이거 말고도 RemoveAll, Clear 함수가 있음.
        // 근데 안쓸 듯
        // RemoveAll  사용
        // 리스트 이름. RemoveAll(x => x == "yyw');
        // x => x== "yyw" 이 부분은 람다식이라 하는데...
        // 몰라도 됨.
        // 내용은 x가 yyw인 애를 모두 지운다는 내용
        //


        // lua 구구단 만들기
        // for i = 1, i <= 9 do
        //       for s = 1, s <=9 do
        //          print i * s
        //       end
        // end

        // C#은 중괄호{}로 묶어 줌
        // for 문은
        for (int i = 0; i < 9; i++)
        {
            // int i : i가 0부터 시작.
            // i < 9 : 9보다 작을 때까지
            // i++ : i를 1씩 증가
        }

        //i는 위에 보면 닫기로 닫혀버려서, 밖에서 또 써도돼.

        int sum = 0; // 합계를 담을 정수형 변수
        int odd = 0; // 홀수 수량을 담을 정수형 변수

        // int test = (4/8 0.5)
        // test 
        for (int i = 2; i < 10; i++)
        {
            for (int j = 1; j < 10; i++)
            {
                int result = i * j;
                Debug.Log(i + "x" + j + " = " + result);
                sum += result;
                if (result % 2 == 1)
                {
                    odd++;
                }
            }

        }

        // 스위치
        // 얘도 조건에 따른 제어문임 (if랑 비슷)
        // 근데 얘는 하나의 값을 참조해서 일치하는 경우에만
        // 해당 명령어를 실행하는 방식
        // 비교, 논리 연산 불가
        // 정확히 일치하는 값이 있어야 쓸 수 있음

        //switch (비교값_변수 이름이 들어간다고 생각하면돼)
        // {
        //     case 일치값1:
        //            실행할 명령어
        //         break;
        //     case 일치값2:
        //            실행할 명령어
        //         break;
        //       default:
        //             일치값이 없을 때 실행할 내용
        //              if로 치면 else에 해당
        //        break;
        //}



        //int randValue;
        //randValue = Random.Range(0, 3);
        // int 일 때 끝값 포함 안함
        //randValue = (int)Random.RandomRange(0f, 3f);

        // 위 두개가 돌아가는 방식이 다르기 때문에 구분해서 잘 알고 있어야해.

        // Random.Range(0.0, 4.0); --> 0.0부터 4.0까지의 범위 중 소숫점 임의의 값을 구할 수 있다. 4.0도 포함이다.
        // Random.Range(0, 4); --> 0부터 4까지의 범위 중 정수값 중 임의의 값을 구할 수 있다. 4는 제외된다.
        // 꼭 알아두기

        // 아래 예시 해보기*
        // *상자깡 만들기
        // 상자 1개는 골드, 에메랄드, 루비 중 1종류 지급
        // 상자 1개당 재화 지급 수량은 1~100 랜덤 (종류 안가림)
        // 100개 깠을 때 각각 몇 개씩 얻나?

        // 정리*
        // 재화 종류(string) = 골드, 에메랄드, 루비
        // 재화 수량(int) = 1~100 (random)
        // 상자 수량(int) = 100
        //변수명은 소문자로 시작
        //함수명은 대문자로 시작

        //상자가 0부터 시작이고 100보다 작을때까지 1씩 증가. 상자를 100번 까겠다는 식
        // for문은 횟수를 지정하면 자동으로 반복 횟수만큼 처리함
       
            // 골드,에메랄드, 루비중 1종류를 주겠다
            // 랜덤으로 주겠다.
            // 수량도 랜덤으로 주겠다.
            // 만약에 재화가 골드면 골드,수량 출력
            // 만약에 재화가 에메랄드면 에메랄드,수량 출력
            // 만약에 재화가 에메랄드면 에메랄드,수량 출력



    }
        

} 

